<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>SolarEdge <%= SolarEdge::VERSION %></title>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <style>
      .axis--x path {
        display: none;
      }
      .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1.5px;
      }
      .bar {
        fill: steelblue;
      }
      .bar:hover {
        fill: brown;
      }
    </style>
  </head>
  <body>
    <h1>Solar energy production</h1>
    <svg width="960" height="500" id="fifteen_minutegraph"></svg>
    <div>
      This site has produced <span id="todays_energy">?.???</span> kWh of
      energy today, <span id="thirty_day_energy">?.???</span> kWh in the past 30 days,
      and <span id="ninety_day_energy">?.???</span> kWh in the past 90 days.
     </div>
     <svg width="960" height="500" id="daily_graph"></svg>
  </body>
  <script>
    // FUNCTIONS
    var parseTime = d3.timeParse("%Y-%m-%d %H:%M:%S %Z");
    var midnightOfTime = function(t) { return new Date(t.getFullYear(), t.getMonth(), t.getDate()); };

    // GLOBALS
    // this will be filled in later for access from console
    var energy_data = null;

    // the element which will contain how much energy we produced today
    var todays_energy = d3.select("span#todays_energy");

    // the element which will contain how much energy we produced the past 30 days
    var thirty_day_energy = d3.select("span#thirty_day_energy");

    // the element which will contain how much energy we produced the past 90 days
    var ninety_day_energy = d3.select("span#ninety_day_energy");

    // SECTION: Initialize the 15 minute interval graph of energy production
    var fifteen_minute_svg = d3.select("svg#fifteen_minutegraph"),
	fifteen_minute_margin = {top: 20, right: 20, bottom: 30, left: 50},
	fifteen_minute_width = +fifteen_minute_svg.attr("width") - fifteen_minute_margin.left - fifteen_minute_margin.right,
	fifteen_minute_height = +fifteen_minute_svg.attr("height") - fifteen_minute_margin.top - fifteen_minute_margin.bottom,
	fifteen_minute_g = fifteen_minute_svg.append("g").attr("transform", "translate(" + fifteen_minute_margin.left + "," + fifteen_minute_margin.top + ")");

    var fifteen_minute_x = d3.scaleTime()
	.rangeRound([0, fifteen_minute_width]);

    var fifteen_minute_y = d3.scaleLinear()
	.rangeRound([fifteen_minute_height, 0]);

    var fifteen_minute_line = d3.line()
	.x(function(d) { return fifteen_minute_x(d.date); })
	.y(function(d) { return fifteen_minute_y(d.value); });

    // SECTION: Initialize the daily graph of energy production
    var daily_svg = d3.select("svg#daily_graph"),
	daily_margin = {top: 20, right: 20, bottom: 30, left: 40},
	daily_width = +daily_svg.attr("width") - daily_margin.left - daily_margin.right,
	daily_height = +daily_svg.attr("height") - daily_margin.top - daily_margin.bottom;

    var daily_x = d3.scaleBand().rangeRound([0, daily_width]).padding(0.1),
	daily_y = d3.scaleLinear().rangeRound([daily_height, 0]);

    var daily_g = daily_svg.append("g")
	.attr("transform", "translate(" + daily_margin.left + "," + daily_margin.top + ")");

    d3.json("/energy.json", function(error, data) {
      if (error) throw error;

      // pre-process the data so we can work with the dates
      data = data.energy.map(function(d) {
	d.date = parseTime(d.date);
	d.value = +d.value;
        return d;
      });

      // make data accessible from the global scope for poking at in console
      energy_data = data;
      console.log(energy_data);

      // SECTION: calculate the total number of watt-hours produced today
      console.log('Updating todays_energy');
      cumulative_energy = data.map(function(d) {
        // only report values from after midnight today
        if(d.date > midnightOfTime(new Date())) {
          return d.value;
        }
      }).filter(function(v) {
        return v != null;
      }).reduce(function(a, b) {
        return a + b;
      }, 0);

      // Display the result
      cumulative_energy_in_kwh = cumulative_energy / 1000;
      todays_energy.text(cumulative_energy_in_kwh.toString());

      // SECTION: calculate the total number of watt-hours produced in 30 days
      console.log('Updating thirty_day_energy');
      cumulative_energy = data.map(function(d) {
        month_ago = new Date();
        month_ago.setMonth(month_ago.getMonth() -1);
        if(d.date > midnightOfTime(month_ago)) {
          return d.value;
        }
      }).filter(function(v) {
        return v != null;
      }).reduce(function(a, b) {
        return a + b;
      }, 0);

      // Display the result
      cumulative_energy_in_kwh = cumulative_energy / 1000;
      thirty_day_energy.text(cumulative_energy_in_kwh.toString());

      // SECTION: calculate the total number of watt-hours produced in 90 days
      console.log('Updating ninety_day_energy');
      cumulative_energy = data.map(function(d) {
        return d.value;
      }).reduce(function(a, b) {
        return a + b;
      })

      // Display the result
      cumulative_energy_in_kwh = cumulative_energy / 1000;
      ninety_day_energy.text(cumulative_energy_in_kwh.toString());

      // SECTION: Update the 15 minute interval graph of energy production
      console.log('Updating fifteen_minute graph')
      fifteen_minute_x.domain(d3.extent(data, function(d) { return d.date; }));
      fifteen_minute_y.domain(d3.extent(data, function(d) { return d.value; }));

      fifteen_minute_g.append("g")
	  .attr("class", "axis axis--x")
	  .attr("transform", "translate(0," + fifteen_minute_height + ")")
	  .call(d3.axisBottom(fifteen_minute_x));

      fifteen_minute_g.append("g")
	  .attr("class", "axis axis--y")
	  .call(d3.axisLeft(fifteen_minute_y))
	.append("text")
	  .attr("fill", "#000")
	  .attr("transform", "rotate(-90)")
	  .attr("y", 6)
	  .attr("dy", "0.71em")
	  .style("text-anchor", "end")
	  .text("Wh - Watt-Hours");

      fifteen_minute_g.append("path")
	  .datum(data)
	  .attr("class", "line")
	  .attr("d", fifteen_minute_line);

      // SECTION: Update the daily graph of energy production
      console.log('Updating daily graph')

      // bucket energy production by day
      daily_energy = d3.map();
      data.forEach(function(d) {
        // Shorten the dates so they display better
        // ALSO: d3 maps seem to convert keys to strings
        var bucket = d.date.getMonth().toString() + "/" + d.date.getDate().toString();
        // If this is the first time seeing a date, initialize it to zero
        if(!daily_energy.has(bucket)) {
          daily_energy.set(bucket, 0);
        }
        // Update the value we have for the date
        daily_energy.set(bucket, daily_energy.get(bucket) + d.value);
      });

      // Update the graph with these values
      daily_x.domain(daily_energy.keys());
      daily_y.domain([0, d3.max(daily_energy.values())]);

      daily_g.append("g")
	  .attr("class", "axis axis--x")
	  .attr("transform", "translate(0," + daily_height + ")")
	  .call(d3.axisBottom(daily_x));

      daily_g.append("g")
	  .attr("class", "axis axis--y")
	  .call(d3.axisLeft(daily_y).ticks(10))
	.append("text")
	  .attr("transform", "rotate(-90)")
	  .attr("y", 6)
	  .attr("dy", "0.71em")
	  .attr("text-anchor", "end")
	  .text("Frequency");

      daily_g.selectAll(".bar")
	.data(daily_energy.entries())
	.enter().append("rect")
	  .attr("class", "bar")
	  .attr("x", function(d) { return daily_x(d.key); })
	  .attr("y", function(d) { return daily_y(d.value); })
	  .attr("width", daily_x.bandwidth())
	  .attr("height", function(d) { return daily_height - daily_y(d.value); });
    });
  </script>
</html>
